service: my-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  environment: ${file(env.yml):prod, file(env.yml):default}
  tableName: MyTable
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.default}

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: prod
  environment:
    MY_KEY: ${self:custom.environment.myKey}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - { "Fn::GetAtt": ["MyTable", "Arn"] }
        - Fn::Join:
            - "/"
            - - { "Fn::GetAtt": ["MyTable", "Arn"] }
              - "index/*"

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}

functions:
  HelloWorld:
    handler: HelloWorld.main
    events:
      - http:
          path: helloworld
          method: get
          cors: true
